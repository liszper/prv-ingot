{"version":3,"sources":["app/hello.cljs"],"mappings":";;;;;;AAQA,AAACA;AACD,AAAcC,AAAO,AAAAC;;AAErB,AAACC,AAAeC;AAUhB,AAAA,AAAMC,AAASC;AAAf,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAKG,AAAAC,AAAkB,AAACE,AAAQ,AAAA,AAAA,AAAAC,AAAYJ;AAAvC,AAAA,AAAAC;AAAA,AAAAA,AAASC;AAAT,AACE,AAACG,AACD,AAACC,AACD,AAAKC;AAAL,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEgB,AAAIA,AACkB,AAAA,AAAA,AAAIA,AACjB,AAAA,AAAA,AAAIA,AAGzB,AAACD,AACC,AAAKE;AAAL,AAAA,AAAA,AACMA;AACN,AAACL,AAAQ,AAAII;AAInBL;;AAjBF,AAAA,AAAA;;AALH,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AA4BuB,AACE,AACE,AAAA,AAAA,AAAOP,AACP;AAAA,AACE,AAAA,AAACc,AAAMT,AAAMU,AAAgB,AAAc,AAAiBf;;;;AAWzF,AAAKgB,AAAM,AAAA,AAACC;AAEZ,AAAA,AAAMC;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGId,AAAQY","names":["js/module$node_modules$incognito_js$build$web$module$index.goServices.implementGoMethodUseWasm","app.hello/wallet","js/module$node_modules$incognito_js$build$web$module$index.WalletInstance","js/console.log","js/module$node_modules$papp_sdk$dist$papp_sdk_min","app.hello/wallets","state","temp__5733__auto__","accounts","cljs.core.js__GT_clj","cljs.core/deref","cljs.core.doall","cljs.core.map","account","id","cljs.core.swap_BANG_","cljs.core/assoc","app.hello/state","reagent.core.atom","app.hello/hello"],"sourcesContent":["(ns app.hello\n  (:require \n    [reagent.core :as r]\n    [clojure.core.async :as async]\n    [\"incognito-js\" :as incognito-js]\n    [\"papp-sdk\" :as papp]\n    ))\n\n(incognito-js/goServices.implementGoMethodUseWasm)\n(def ^:export wallet (incognito-js/WalletInstance.))\n\n(js/console.log papp)\n\n;(papp/start\n;  (clj->js {})\n;  (fn [error sdk]\n;    (if error\n;      (js/console.log \"pApp failed!\")\n;      (js/console.log \"pApp suceeded!\")\n;      )))\n\n(defn wallets [state]\n  [:div\n   [:h3 \"pApp Wallet\"]\n\n   [:h3 \"Wallet with SDK\"]\n   (if-let [accounts (js->clj (:accounts @state))]\n     (doall\n     (map\n     (fn [account]\n       [:div\n        [:h4 \"Name: \"(-> account .-name)]\n        [:h4 \"Your generated PRV address: \"(-> account .-nativeToken .-accountKeySet .-publicKeyCheckEncode)]\n        [:h4 \"Validator key: \"(-> account .-nativeToken .-accountKeySet .-validatorKey)]\n        ;[:h4 \"Balance: \"(-> account .-nativeToken (.getAvaiableBalance)) \" PRV\"]\n        [:div \"Others: \"\n         (map\n           (fn [id]\n             [:p id])\n           (js->clj (-> account .-privacyTokenIds))\n           )\n         ]\n        ])\n     accounts \n     ))\n     [:h4 \"empty\"]\n     )\n   [:br]\n   [:input {:type \"button\" :value \"Generate wallet\"\n            :on-click #(do\n                         (.then\n                           (.init wallet \"my-passphrase\" \"TEST-WALLET\")\n                           (fn [] \n                             (swap! state assoc :accounts (.getAccounts (.-masterAccount wallet)))))\n                         )}]\n   ;[:input {:type \"button\" :value \"Follow pBTC\"\n   ;         :on-click #(do\n   ;                      (.followTokenById\n   ;                        (first (js->clj (.getAccounts (.-masterAccount wallet))))\n   ;                        \"b832e5d3b1f01a4f0623f7fe91d6673461e1f5d37d91fe78c5c2e6183ff39696\")\n   ;                      )}]\n   \n   ])\n\n(def state (r/atom {}))\n\n(defn hello []\n  [:<>\n   [:p \"Hello anonymous!\"]\n   [wallets state]])\n"]}